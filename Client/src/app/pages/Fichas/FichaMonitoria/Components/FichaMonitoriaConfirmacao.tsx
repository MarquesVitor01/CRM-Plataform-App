import React, { useEffect, useState } from "react";
import { QRCodeSVG } from "qrcode.react";
import { useParams } from "react-router-dom";
import { doc, getDoc } from "firebase/firestore";
import { db } from "../../../../global/Config/firebase/firebaseConfig";
import axios from "axios";
import {
  formatarCentavosParaReais,
  formatarDataParaBR,
  formatarNomeOperador,
} from "../../../../global/utils/formatters";
import { Boleto } from "./Boleto";
import SendEmailBrevo from "./sendEmailBrevo";

interface InfoConfirmacao {
  monitoriaConcluidaYes: boolean;
  monitoriaConcluidaNo: boolean;
  observacaoYes: boolean;
  nomeMonitor: string;
  // qrcodeText: string;
  linkGravacao: string;
  imagemUrl?: string;
}

interface InfoConfirmacaoProps {
  form: InfoConfirmacao | null;
  handleInputChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  handleImageUpload: (e: React.ChangeEvent<HTMLInputElement>) => void;
}

const questions = [
  {
    label: "Confirma que realizou a auditoria?",
    yesId: "monitoriaConcluidaYes",
    noId: "monitoriaConcluidaNo",
    yesChecked: (form: InfoConfirmacao) => form.monitoriaConcluidaYes,
    noChecked: (form: InfoConfirmacao) => form.monitoriaConcluidaNo,
  },
  // {
  //   label: "A venda precisa ser refeita ou tem muitos problemas?",
  //   yesId: "observacaoYes",
  //   noId: "observacaoNo",
  //   yesChecked: (form: InfoConfirmacao) => form.observacaoYes,
  // },
];

export const FichaMonitoriaConfirmacao: React.FC<InfoConfirmacaoProps> = ({
  form,
  handleInputChange,
  handleImageUpload,
}) => {
  const { id } = useParams<{ id: string }>();
  const [clientData, setClientData] = useState<any>(null);
  const [loading, setLoading] = useState(true);

  const [sentStatus, setSentStatus] = useState({
    apresentacao: false,
    solicitacao: false,
    qr: false,
  });

  useEffect(() => {
    const fetchClientData = async () => {
      try {
        if (id) {
          const docRef = doc(db, "vendas", id);
          const docSnap = await getDoc(docRef);

          if (docSnap.exists()) {
            setClientData(docSnap.data());
          } else {
            console.log("Cliente n√£o encontrado");
          }
        }
      } catch (error) {
        console.error("Erro ao buscar dados do cliente: ", error);
      } finally {
        setLoading(false);
      }
    };

    fetchClientData();
  }, [id]);

  const enviarMensagem = async (tipo: "apresentacao", message: string) => {
    try {
      const celularComCodigo = `55${clientData.celular.replace(/^55/, "")}`;

      const response = await axios.post(
        "https://crm-plataform-app-6t3u.vercel.app/api/enviar-texto",
        {
          phone: celularComCodigo,
          message,
        }
      );

      if (response.data.success) {
        alert("Mensagem enviada com sucesso!");
        setSentStatus((prev) => ({ ...prev, [tipo]: true }));
      } else {
        alert("Falha ao enviar a mensagem.");
      }
    } catch (error) {
      console.error("Erro ao enviar mensagem:", error);
      alert("Ocorreu um erro ao enviar a mensagem.");
    }
  };

  if (loading) return <p>Carregando...</p>;
  if (!form) return null;

  return (
    <div className="col-md-6 auditoria-bg">
      <h3 className="text-center">Auditoria</h3>
      <div className="row monitoria">
        {questions.map(({ label, yesId, noId, yesChecked, noChecked }) => (
          <div className="col-md-6 box-quest" key={yesId}>
            <label>{label}</label>
            <div className="form-check">
              <input
                className="form-check-input"
                type="checkbox"
                id={yesId}
                checked={yesChecked(form)}
                onChange={handleInputChange}
              />
              <label className="form-check-label" htmlFor={yesId}>
                Sim
              </label>
            </div>
          </div>
        ))}
        <div className="col-md-6 box-quest">
          <label>Informe seu nome:</label>
          <input
            className="form-control"
            id="nomeMonitor"
            name="nomeMonitor"
            value={form.nomeMonitor}
            onChange={handleInputChange}
            placeholder="Digite seu nome aqui"
          />
        </div>
        <div className="col-md-6 box-quest">
          <label>Informe o Link da Grava√ß√£o:</label>
          <input
            className="form-control"
            id="linkGravacao"
            name="linkGravacao"
            value={form.linkGravacao}
            onChange={handleInputChange}
            placeholder="Insira o link da grava√ß√£o"
          />
        </div>
        <div className="col-md-6">
          <button
            className="btn btn-primary mt-3 d-flex justify-content-between align-items-center"
            onClick={() =>
              enviarMensagem(
                "apresentacao",
                `Ol√° *${
                  clientData?.responsavel || "[NOME DO RESPONS√ÅVEL]"
                }*, eu me chamo *${
                  formatarNomeOperador(clientData?.operador) ||
                  "[NOME OPERADOR]"
                }* e ser√° um prazer ajudar a melhorar a sua p√°gina no Google Maps! üöÄ
                
                Conforme conversamos, o plano escolhido foi o *${
                  clientData?.validade || "[TIPO DE PLANO]"
                }*, no valor de *R$ ${
                  formatarCentavosParaReais(clientData?.valorVenda) ||
                  "[VALOR DA VENDA]"
                }* com vencimento para o dia *${
                  formatarDataParaBR(clientData?.dataVencimento) ||
                  "[DATA DE VENCIMENTO]"
                }*.
                
                üìå Servi√ßos inclusos em seu plano:
                
                Atualiza√ß√£o ou cria√ß√£o dos dados comerciais no Google Maps
                
                Otimiza√ß√£o de palavras-chave
                
                Inclus√£o de at√© 5 bairros para ampliar a divulga√ß√£o do estabelecimento
                
                QR Code direcionador para receber avalia√ß√µes no Google
                
                Atualiza√ß√£o de fotos e v√≠deos (mediante envio da contratante)
                
                Inclus√£o de redes sociais (mediante envio da contratante)
                
                Cria√ß√£o de artes personalizadas para postagens (mediante solicita√ß√£o da contratante)
                
                Cria√ß√£o de logotipo (mediante solicita√ß√£o da contratante)
                
                Cria√ß√£o de cart√£o digital interativo (mediante solicita√ß√£o da contratante)
                
                ‚ö†Ô∏è Importante: Como se trata de presta√ß√£o de servi√ßos executados mediante aceite verbal, todos os servi√ßos ser√£o realizados antes da conclus√£o do pagamento. Ressaltamos que n√£o √© poss√≠vel cancelar o servi√ßo ap√≥s sua execu√ß√£o, visto que os benef√≠cios j√° ter√£o sido entregues √† empresa.
                
                üìë Protocolo do atendimento: 2025150717
                üìû Central de atendimento: 0800 580 2766^\n\n`
              )
            }
          >
            Enviar Apresenta√ß√£o
            <span className="ms-2">
              {sentStatus.apresentacao ? "‚úÖ" : "‚ùå"}
            </span>
          </button>
          <Boleto />
          <div className="col-md-6">
            <SendEmailBrevo to={clientData.email1} clientData={clientData} />
          </div>
        </div>
      </div>
    </div>
  );
};
